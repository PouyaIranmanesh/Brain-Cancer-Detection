%Pouya Iranmanesh

 clc
 clear all
 close all
 
 Path_normal='E:\Brain\mri_dataset\normal\*.jpg';
 Path_tumor='E:\Brain\mri_dataset\tumor\*.jpg';
 Files_normal=dir(Path_normal);
 Files_tumor=dir(Path_tumor);
 
 for i=1:length(Files_normal)+length(Files_tumor)
     if i<=length(Files_normal)
         fn = [Path_normal(1:end-5) Files_normal(i,1).name];
     else
         fn = [Path_tumor(1:end-5) Files_tumor(i-20,1).name];
     end
     im = imread(fn);   
     im1=rgb2gray(im);   
     im2=histeq(im1);  
     im3=medfilt2(im2,[3,3]); 

	sigma = 0.4;   
	alpha = 0.5;   
     im4=locallapfilt(im3, sigma, alpha);
     im5=im2double(im4); 
     f1=mean(im5(:));  
     f2=var(im5(:));  
     f3=std(im5(:)); 
     f4=max(im5(:)); 
     f5=min(im5(:));  
     f6=entropy(im5(:));  
     f7=kurtosis(im5(:)); 
     f8=skewness(im5(:)); 
     feature_stat(i,:)=[f1 f2 f3 f4 f5 f6 f7 f8];
     feature_lbp(i,:)=extractLBPFeatures(im5);   %local binary pattern
 end
%  input=feature_stat;
 input=feature_lbp;
 output=[zeros(length(Files_normal),1);ones(length(Files_tumor),1)];
 
 % Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 25-Apr-2020 23:32:58
%
% This script assumes these variables are defined:
%
%   input - input data.
%   output - target data.

x = input';
t = output';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 8;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 5/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

